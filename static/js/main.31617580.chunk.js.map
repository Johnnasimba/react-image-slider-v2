{"version":3,"sources":["components/sliderData.js","components/dots/dots.component.jsx","components/ImageSlider.js","App.js","reportWebVitals.js","index.js"],"names":["SliderData","image","Dots","numberOfSlides","currentSlide","className","Array","fill","map","_","index","style","background","ImageSlider","slides","useState","current","setCurrent","length","nextSlide","prevSlide","useEffect","window","addEventListener","e","key","isArray","onClick","slide","src","process","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PACaA,EAAa,CACtB,CACIC,MAAO,2BAEX,CACIA,MAAO,uBAEX,CACIA,MAAO,4BAEX,CACIA,MAAO,iC,sBCSAC,EAhBF,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,aAC3B,OACI,qBAAKC,UAAU,eAAf,SAEQC,MAAMH,GAAgBI,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAC9B,qBACAL,UAAU,MAEVM,MAAO,CAACC,WAAYR,IAAiBM,EAAO,QAAS,UADhDA,SC+CVG,MAtDf,YAAgC,IAAVC,EAAS,EAATA,OAClB,EAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAASJ,EAAOI,OAEhBC,EAAY,WACdF,EAAWD,IAAYE,EAAS,EAAG,EAAIF,EAAU,IAG/CI,EAAY,WACdH,EAAuB,IAAZD,EAAeE,EAAS,EAAIF,EAAU,IAgBrD,OAbAK,qBAAU,WACNC,OAAOC,iBAAiB,WAAW,SAAAC,GACjC,GAAa,cAAVA,EAAEC,IACDL,QACE,IAAa,eAAVI,EAAEC,IAGP,OAFDN,YAQLb,MAAMoB,QAAQZ,IAAUA,EAAOI,QAAU,EAElC,KAIP,sBAAKb,UAAU,eAAf,UACI,cAAC,IAAD,CAAsBA,UAAU,aAAasB,QAAWP,IACxD,cAAC,IAAD,CAAuBf,UAAU,cAAcsB,QAASR,IAEpDnB,EAAWQ,KAAI,SAACoB,EAAOlB,GACnB,OACI,qBAAKL,UAAWK,IAAUM,EAAS,eAAgB,QAAnD,SAEQN,IAAUM,GACN,qBAAKa,IAAKC,yBAAyBF,EAAM3B,MAAOI,UAAU,QAAQ0B,IAAI,eAHjBrB,MAY7E,cAAC,EAAD,CAAMP,eAAgBe,EAAQd,aAAcY,QC1CzCgB,MARf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,EAAD,CAAaS,OAAQd,OCKZiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31617580.chunk.js","sourcesContent":["\r\nexport const SliderData = [\r\n    {\r\n        image: '/images/school-life.jpg'\r\n    },\r\n    {\r\n        image: '/images/Cycling.jpg'\r\n    },\r\n    {\r\n        image: '/images/John-nasimba.jpg'\r\n    },\r\n    {\r\n        image: '/images/Me-and-my-father.jpg'\r\n    }\r\n]","import React from 'react';\r\n\r\nimport './dots.styles.css';\r\n\r\n\r\nconst Dots = ({numberOfSlides, currentSlide}) => {\r\n    return (\r\n        <div className=\"dots-wrapper\">\r\n            {\r\n                Array(numberOfSlides).fill(1).map((_, index)=> (\r\n                    <div \r\n                    className=\"dot\"\r\n                    key={index}\r\n                    style={{background: currentSlide === index? 'black': 'white'}}\r\n                    ></div>\r\n                   \r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Dots;","import React, { useState, useEffect } from 'react'\r\nimport { SliderData } from './sliderData';\r\nimport {FaArrowAltCircleRight, FaArrowAltCircleLeft} from 'react-icons/fa';\r\nimport Dots from './dots/dots.component';\r\n\r\nfunction ImageSlider({slides}) {\r\n    const [current, setCurrent] = useState(0);\r\n    const length = slides.length\r\n\r\n    const nextSlide = () => {     \r\n        setCurrent(current === length - 1? 0 : current + 1)\r\n    }\r\n \r\n    const prevSlide = () => {\r\n        setCurrent(current === 0? length - 1 : current - 1)\r\n    }\r\n  \r\n    useEffect(() => {\r\n        window.addEventListener('keydown', e => {\r\n          if(e.key === \"ArrowLeft\") {\r\n              prevSlide();\r\n          }else if(e.key === \"ArrowRight\") {\r\n             nextSlide();\r\n          } else {\r\n              return\r\n          }\r\n        })\r\n    })\r\n\r\n//    Return nothing when slides array contains no data\r\n    if(!Array.isArray(slides) ||slides.length <= 0) {\r\n        // Array.isArray() checks whether an object is an array\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='image-slider'>\r\n            <FaArrowAltCircleLeft className=\"left-arrow\" onClick = {prevSlide} />\r\n            <FaArrowAltCircleRight className=\"right-arrow\" onClick={nextSlide} />\r\n            {\r\n                SliderData.map((slide, index) => {\r\n                    return(\r\n                        <div className={index === current? 'slide active': 'slide'} key={index} >\r\n                            {\r\n                                index === current && (\r\n                                    <img src={process.env.PUBLIC_URL + slide.image} className=\"image\" alt=\"My images\" />\r\n\r\n                                )\r\n                            }\r\n                        </div>\r\n                    ) \r\n                    \r\n                })\r\n            }\r\n            <Dots numberOfSlides={length} currentSlide={current} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSlider;\r\n","import './App.css';\nimport ImageSlider from './components/ImageSlider';\nimport { SliderData } from './components/sliderData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageSlider slides={SliderData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}